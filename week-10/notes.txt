<BrowserRouter>
        <Routes>
          <Route path="/" element={<Layout />}>
            <Route path="/neet/class-11" element={<Class11 />} />
            <Route path="/neet/class-12" element={<Class12 />} />
            <Route path="/" element={<Index />} />
            <Route path="*" element={<ErrorPage />}></Route>
          </Route>
        </Routes>
        Footer
      </BrowserRouter>


      function Header() {
  return (
    <div>
      <Link to={'/neet/class-11'}>Class 11</Link>
      <Link to={'/neet/class-12'}>Class 12</Link>
      <Link to={'/'}>Allen</Link>
    </div>
  )
}
function ErrorPage() {
  return (
    <div>
      <h1>sorry page not loaded</h1>
    </div>
  )
}
function Class11() {
  return <div>hello from class 11</div>
}

function Class12() {
  return <div>hello from class 12</div>
}

function Index() {
  return <div>home page</div>
}

// use ref
'
import { useRef } from 'react'
import { BrowserRouter, Routes, Route, Link, Outlet } from 'react-router-dom'

function App() {
  const inputref = useRef()
  function input() {
    inputref.current.focus()
  }
  return (
    <div>
      Signup
      <input ref={inputref} type="text" />
      <input type="text" />
      <button onClick={input}>SUBMIT</button>
    </div>
  )
}

export default App


this is how we are doing with use state stop watch

import { useRef, useState } from 'react'
import { BrowserRouter, Routes, Route, Link, Outlet } from 'react-router-dom'

function App() {
  const [count, setCount] = useState(0)
  const [timer, setTimer] = useState(1)
  function startCount() {
    let value = setInterval(() => {
      setCount((c) => c + 1)
    }, 1000)
    setTimer(value)
  }

  function stopCount() {
    clearInterval(timer)
  }
  return (
    <div>
      {count}
      <button onClick={startCount}>start</button>
      <button onClick={stopCount}>stop</button>
    </div>
  )
}

export default App


but here it re renders every time when re render but we want to,
so we can use ref!


using use ref!

import { useRef, useState } from 'react'
import { BrowserRouter, Routes, Route, Link, Outlet } from 'react-router-dom'

function App() {
  const [count, setCount] = useState(0)
  let timer = useRef()
  function startCount() {
    let value = setInterval(() => {
      setCount((c) => c + 1)
    }, 1000)
    timer.current = value
  }

  function stopCount() {
    clearInterval(timer.current)
  }
  return (
    <div>
      {count}
      <button onClick={startCount}>start</button>
      <button onClick={stopCount}>stop</button>
    </div>
  )
}

export default App




// light bulb..
function App() {
  return (
    <>
      <LightBulb />
    </>
  )
}

const LightBulb = () => {
  const [bulbOn, setBulbOn] = useState(true)
  return (
    <div>
      <BulbState bulbOn={bulbOn} />
      <ToggleState bulbOn={bulbOn} setBulbOn={setBulbOn} />
    </div>
  )
}

const BulbState = ({ bulbOn }) => {
  return <div>{bulbOn ? 'bulb on' : 'bulb off'}</div>
}

const ToggleState = ({ setBulbOn }) => {
  function toggle() {
    setBulbOn((currentState) => !currentState)
  }
  return (
    <div>
      <button onClick={toggle}>Toggle</button>
    </div>
  )
}


what is prop drilling?

prop drilling is just defining a state variable in a parent comp. and getting into the child comp.
it can leads to complexity of code.

how we fixing this?
through context api.
context api has 3 jargons. they are.,

context -> initialising context
provider -> providing
consumer -> consuming 

1. context
how to create a context.?
first we have to import it.
then we have to create a context,, 

const context = createContext()

2.provider

provide, we have wrap up through provider

<context.Provider>

</context.provider>

3. consumer


that provider gives the whole object, so we have to destructure it.

const {des.obj} = useContext(context)  ==> we use context.,
 

example code.. for context and custom context.,

const Context = createContext()

const BulbProvider = ({ children }) => {
  const [bulbOn, setBulbOn] = useState(false)
  return (
    <div>
      <Context.Provider
        value={{
          bulbOn: bulbOn,
          setBulbOn: setBulbOn,
        }}
      >
        {children}
      </Context.Provider>
    </div>
  )
}

